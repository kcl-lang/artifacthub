"""
This is the pod_security_policy_spec module in k8s.api.policy.v1beta1 package.
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""


schema PodSecurityPolicySpec:
    """
    PodSecurityPolicySpec defines the policy enforced.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    allowedCSIDrivers : [AllowedCSIDriver], default is Undefined, optional
        AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.
    allowedCapabilities : [str], default is Undefined, optional
        allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
    allowedFlexVolumes : [AllowedFlexVolume], default is Undefined, optional
        allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
    allowedHostPaths : [AllowedHostPath], default is Undefined, optional
        allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
    allowedProcMountTypes : [str], default is Undefined, optional
        AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
    allowedUnsafeSysctls : [str], default is Undefined, optional
        allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.

        Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    defaultAddCapabilities : [str], default is Undefined, optional
        defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
    defaultAllowPrivilegeEscalation : bool, default is Undefined, optional
        defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    forbiddenSysctls : [str], default is Undefined, optional
        forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.

        Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
    fsGroup : FSGroupStrategyOptions, default is Undefined, required
        fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
    hostIPC : bool, default is Undefined, optional
        hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    hostNetwork : bool, default is Undefined, optional
        hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    hostPID : bool, default is Undefined, optional
        hostPID determines if the policy allows the use of HostPID in the pod spec.
    hostPorts : [HostPortRange], default is Undefined, optional
        hostPorts determines which host port ranges are allowed to be exposed.
    privileged : bool, default is Undefined, optional
        privileged determines if a pod can request to be run as privileged.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    requiredDropCapabilities : [str], default is Undefined, optional
        requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    runAsGroup : RunAsGroupStrategyOptions, default is Undefined, optional
        RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
    runAsUser : RunAsUserStrategyOptions, default is Undefined, required
        runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
    runtimeClass : RuntimeClassStrategyOptions, default is Undefined, optional
        runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
    seLinux : SELinuxStrategyOptions, default is Undefined, required
        seLinux is the strategy that will dictate the allowable labels that may be set.
    supplementalGroups : SupplementalGroupsStrategyOptions, default is Undefined, required
        supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
    volumes : [str], default is Undefined, optional
        volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
    """


    allowPrivilegeEscalation?: bool

    allowedCSIDrivers?: [AllowedCSIDriver]

    allowedCapabilities?: [str]

    allowedFlexVolumes?: [AllowedFlexVolume]

    allowedHostPaths?: [AllowedHostPath]

    allowedProcMountTypes?: [str]

    allowedUnsafeSysctls?: [str]

    defaultAddCapabilities?: [str]

    defaultAllowPrivilegeEscalation?: bool

    forbiddenSysctls?: [str]

    fsGroup: FSGroupStrategyOptions

    hostIPC?: bool

    hostNetwork?: bool

    hostPID?: bool

    hostPorts?: [HostPortRange]

    privileged?: bool

    readOnlyRootFilesystem?: bool

    requiredDropCapabilities?: [str]

    runAsGroup?: RunAsGroupStrategyOptions

    runAsUser: RunAsUserStrategyOptions

    runtimeClass?: RuntimeClassStrategyOptions

    seLinux: SELinuxStrategyOptions

    supplementalGroups: SupplementalGroupsStrategyOptions

    volumes?: [str]


